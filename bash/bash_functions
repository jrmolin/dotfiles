#!/bin/bash

function enableVirtualenv()
{
    venvwr="/usr/local/bin/virtualenvwrapper.sh"
    venvwr_python="/usr/local/bin/python2"
    venvwr_virtualenv="/usr/local/bin/virtualenv"
    UNAME=`uname`

    if [ -f $venvwr ] ; then
        # only do this part for darwin
        if [ "x${UNAME}" == "xDarwin" ] ; then
            export VIRTUALENVWRAPPER_PYTHON=${venvwr_python}
            export VIRTUALENVWRAPPER_VIRTUALENV=${venvwr_venv}
        fi

        . $venvwr
    fi
}

function enableRvm()
{
    export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
}

function enableSdkman()
{
    #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
    SDKMAN_DIR="${HOME}/.sdkman"
    INIT="{SDKMAN_DIR}/bin/sdkman-init.sh"
    if [ -s "${SDKMAN_INIT}" ] ;
    then
        export SDKMAN_DIR
        source "${SDKMAN_INIT}"

    fi
}

function enableOcaml()
{
    # OPAM configuration
    export PATH="$HOME/.cargo/bin:$PATH"
    source ${HOME}/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true
}

# docker tomfoolery
function newbox
{
docker run --name $1 --volumes-from=volume_container -it -v /var/run/docker.sock:/var/run/docker.sock -v "$(pwd):/opt/pwd" -e BOX_NAME=$1 nathanleclaire/devbox
}

function enableHeroku()
{
    ### Added by the Heroku Toolbelt
    if [ -d "/usr/local/heroki" ]; then
        export PATH="/usr/local/heroku/bin:$PATH"
    fi
}

function root()
{
    DIRECTORY=".git"
    cur=`pwd`
    last="/"
    found=1
    until [ -d "$cur/$DIRECTORY" ]
    do
        last=$cur
        cur=$(dirname $cur)

        if [ "/" == "$cur" ];
        then
            echo "could not find $DIRECTORY directory in ancestry; staying put"
            found=0
            break
        fi
    done

    if [ $found = 1 ]
    then
        cd $cur
    fi
}

function enableRvm()
{
    export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
}

function enableNvm()
{
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

function enablePyenv()
{
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
}

function enableGo()
{
    if [ -d /usr/local/go ]
    then
        if [ ! -d $HOME/sandbox/go ]
        then
            mkdir -pv $HOME/sandbox/go
        fi

        # set the GOPATH so things work
        export GOHOME=$HOME/shared/golang
        export GOPATH=$GOHOME
        export PATH="$PATH:/usr/local/go/bin:$GOPATH/bin"

    fi
}

function enableYara()
{
    YARAHOME=${HOME}/yara
    if [ -d "${YARAHOME}" ]
    then

        export YARAHOME
        export YARAMANPATH=$YARAHOME/share/man
        export PATH="$PATH:$YARAHOME/bin"
    fi
}

function enableIos()
{
    export iOSOpenDevPath=/opt/iOSOpenDev
    export iOSOpenDevDevice=
    export PATH=${iOSOpenDevPath}/bin:$PATH
}

function docker-redis()
{
    running=$(docker ps | grep redis | awk '{ print $1 }')
    if [ "x$running" != "x" ];
    then
        res=$(docker stop $running)
        res=$(docker rm $running)
    fi

    stopped=$(docker ps -a | grep redis | awk '{ print $1 }')
    if [ "x$stopped" != "x" ];
    then
        res=$(docker rm $stopped)
    fi

    res=$(docker run --name my-redis -p 6379:6379 -d redis:alpine)
}

function getSslCert
{
    SERVER=$1
    PORT=${2:-443}

    if [ "x$SERVER" = "x" ]
    then
        echo "usage: getSslCert <server name (eg google.com)> [<port (eg 8443) -- 443 default>]"
        return 1
    fi

    echo | openssl s_client -showcerts -servername $SERVER -connect $SERVER:$PORT 2>/dev/null | \
        openssl x509 -inform pem -noout -text
}

function backup
{
    if [ "$#" -lt "1" ]
    then
        echo "need to provide a file to backup (abspath)"
        return 1
    fi

    local path=$(readlink -f $1)
    local owner=$(stat --format "%U:%G" $path)
    local mode=$(stat --format "%a" $path)
    local contents=$(cat $path | base64 -)
    sqlite3 $BACKUPS "insert into files (path,owner,mode,contents) values ('$path','$owner','$mode','$contents');"
}

function map
{
    # if given a key and value, insert
    if [ "$#" -eq "2" ]
    then
        value=$(echo $2 | base64 -)
        sqlite3 -batch $BACKUPS <<EOF
insert into map (key,value) values ("$1", "$value");
EOF
        return $?
    elif [ "$#" -eq "1" ]
    then
        value=( $(sqlite3 -batch $BACKUPS <<EOF
.separator " "
SELECT value,id FROM map WHERE key="$1" ORDER BY id DESC LIMIT 1;
EOF
) )
        echo $(echo "${value[0]}" | base64 -d -)
    fi
}

function killhipchat()
{
    pid=$(ps aux | grep hipchat | grep -v grep | awk '{ print $2 }')
    echo "killing ${pid}"
    kill $pid

}

function enableBackups()
{
    export BACKUPS=$HOME/.config/backups/files.db

    if [ ! -e "$BACKUPS" ]
    then
        mkdir -pv `dirname $BACKUPS`
        sqlite3 $BACKUPS "create table files (id INTEGER PRIMARY KEY, dt datetime default current_timestamp, path TEXT, owner TEXT, mode TEXT, contents BLOB);"
        sqlite3 $BACKUPS "create table map (id INTEGER PRIMARY KEY, dt datetime default current_timestamp, key TEXT, value TEXT);"
    fi

    export LOGFILE="$HOME/.configs/backups/logfile.db"
    if [ ! -d `dirname $LOGFILE` ]
    then
        mkdir -p `dirname $LOGFILE`
    fi
}

if [ -d "${HOME}/.bash_functions.d" ]
then
    for f in $(ls -1 ${HOME}/.bash_functions.d/*)
    do
        . $f
    done
fi

