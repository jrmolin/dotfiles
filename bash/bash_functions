#!/bin/bash

function isInPath()
{
    local name=$1
    path_to_executable=$(which $name)
    if [ -x "$path_to_executable" ] ; then
        echo "1"
    else
        echo ""
    fi
}

function enableVirtualenv()
{
    venvwr="/usr/local/bin/virtualenvwrapper.sh"
    venvwr_python="/usr/local/bin/python2"
    venvwr_virtualenv="/usr/local/bin/virtualenv"
    UNAME=`uname`

    if [ -f $venvwr ] ; then
        # only do this part for darwin
        if [ "x${UNAME}" == "xDarwin" ] ; then
            export VIRTUALENVWRAPPER_PYTHON=${venvwr_python}
            export VIRTUALENVWRAPPER_VIRTUALENV=${venvwr_venv}
        fi

        . $venvwr
    fi
}

function enableRvm()
{
    export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
}

function enableSdkman()
{
    #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
    SDKMAN_DIR="${HOME}/.sdkman"
    SDKMAN_INIT="${SDKMAN_DIR}/bin/sdkman-init.sh"
    if [ -s "${SDKMAN_INIT}" ]
    then
        . "${SDKMAN_INIT}"

        export SDKMAN_DIR
    fi
}

function enableOcaml()
{
    # OPAM configuration
    test -r ${HOME}/.opam/opam-init/init.sh && \
        . ${HOME}/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true

    eval $(opam env)
}

function enableRust()
{
    test -r ${HOME}/.cargo/env && \
        . ${HOME}/.cargo/env > /dev/null 2> /dev/null
}

# docker tomfoolery
function newbox
{
docker run --name $1 --volumes-from=volume_container -it -v /var/run/docker.sock:/var/run/docker.sock -v "$(pwd):/opt/pwd" -e BOX_NAME=$1 nathanleclaire/devbox
}

function enableHeroku()
{
    ### Added by the Heroku Toolbelt
    if [ -d "/usr/local/heroki" ]; then
        export PATH="/usr/local/heroku/bin:$PATH"
    fi
}

projectRoot() {
    local _FILE=${1:-.git}
    local _ISDIR=${2:-}
    cur=`pwd`
    last="/"
    found=0
    until [ "$last" == "$cur" ]
    do
        if [[ -n "$_ISDIR" ]] && [[ -d "$cur/$_FILE" ]]
        then
            found=1
            break
        elif [[ -z "$_ISDIR" ]] && [[ -e "$cur/$_FILE" ]]
        then
            found=1
            break
        fi

        last=$cur
        cur=$(dirname $cur)

    done

    if [ $found = 1 ]
    then
        echo "${cur}"
    else
        echo "."
    fi
}

rootFile() {
    local _FILE=${1:-.git}

    local _root=$(projectRoot $_FILE)

    if [ "x${_root}" != "x" ]
    then
        cd $_root
    else
        echo "could not find [$_FILE] in the directory ancestry"
    fi
}

root() {
    local _FILE=${1:-.git}

    local _root=$(projectRoot $_FILE 1)

    if [ "x${_root}" != "x" ]
    then
        cd $_root
    else
        echo "could not find [$_FILE] in the directory ancestry"
    fi
}

function enableRvm()
{
    export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
}

function enableNvm()
{
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

function enablePyenv()
{
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
}

function enableYara()
{
    YARAHOME=${HOME}/yara
    if [ -d "${YARAHOME}" ]
    then

        export YARAHOME
        export YARAMANPATH=$YARAHOME/share/man
        export PATH="$PATH:$YARAHOME/bin"
    fi
}

function enableIos()
{
    export iOSOpenDevPath=/opt/iOSOpenDev
    export iOSOpenDevDevice=
    export PATH=${iOSOpenDevPath}/bin:$PATH
}

function docker-redis()
{
    running=$(docker ps | grep redis | awk '{ print $1 }')
    if [ "x$running" != "x" ];
    then
        res=$(docker stop $running)
        res=$(docker rm $running)
    fi

    stopped=$(docker ps -a | grep redis | awk '{ print $1 }')
    if [ "x$stopped" != "x" ];
    then
        res=$(docker rm $stopped)
    fi

    res=$(docker run --name my-redis -p 6379:6379 -d redis:alpine)
}

function getSslCert
{
    SERVER=$1
    PORT=${2:-443}

    if [ "x$SERVER" = "x" ]
    then
        echo "usage: getSslCert <server name (eg google.com)> [<port (eg 8443) -- 443 default>]"
        return 1
    fi

    echo | openssl s_client -showcerts -servername $SERVER -connect $SERVER:$PORT 2>/dev/null | \
        openssl x509 -inform pem -noout -text
}

function oldbackup
{
    if [ "$#" -lt "1" ]
    then
        echo "need to provide a file to backup (abspath)"
        return 1
    fi

    local path=$(readlink -f $1)
    local owner=$(stat --format "%U:%G" $path)
    local mode=$(stat --format "%a" $path)
    local contents=$(cat $path | base64 -)
    sqlite3 $BACKUPS "insert into files (path,owner,mode,contents) values ('$path','$owner','$mode','$contents');"
}

function oldmap
{
    # if given a key and value, insert
    if [ "$#" -eq "2" ]
    then
        value=$(echo $2 | base64 -)
        sqlite3 -batch $BACKUPS <<EOF
insert into map (key,value) values ("$1", "$value");
EOF
        return $?
    elif [ "$#" -eq "1" ]
    then
        value=( $(sqlite3 -batch $BACKUPS <<EOF
.separator " "
SELECT value,id FROM map WHERE key="$1" ORDER BY id DESC LIMIT 1;
EOF
) )
        echo $(echo "${value[0]}" | base64 -d -)
    fi
}

function killhipchat()
{
    pid=$(ps aux | grep hipchat | grep -v grep | awk '{ print $2 }')
    echo "killing ${pid}"
    kill $pid

}

function enableBackups()
{
    export BACKUPS=$HOME/.config/backups/files.db

    if [ ! -e "$BACKUPS" ]
    then
        mkdir -pv `dirname $BACKUPS`
        sqlite3 $BACKUPS "create table files (id INTEGER PRIMARY KEY, dt datetime default current_timestamp, path TEXT, owner TEXT, mode TEXT, contents BLOB);"
        sqlite3 $BACKUPS "create table map (id INTEGER PRIMARY KEY, dt datetime default current_timestamp, key TEXT, value TEXT);"
    fi

    export LOGFILE="$HOME/.configs/backups/logfile.db"
    if [ ! -d `dirname $LOGFILE` ]
    then
        mkdir -p `dirname $LOGFILE`
    fi
}

function enableAntlr()
{
    ANTLR=/usr/local/lib/antlr-4.8-complete.jar
    export CLASSPATH=".:$ANTLR:$CLASSPATH"
    alias antlr4='java -Xmx500M -cp "$CLASSPATH" org.antlr.v4.Tool'
    alias grun='java org.antlr.v4.gui.TestRig'
}

function enableToolchain()
{
    local path="$HOME/.toolchain_path"

    if [ -e "$path" ]
    then
        local TOOLCHAIN=$(< $path)
        if [[ "${PATH}" = *"${TOOLCHAIN}"* ]]
        then
            echo "it's already there"
        else
            PATH=${TOOLCHAIN}:$PATH
            echo "added ${TOOLCHAIN} to PATH"
        fi
    else
        echo "You need to create a file at [$path] with only the path to the repo in it"
    fi

}

function stripFromPath()
{
    local _path=$1
    PATH=${PATH//":$_path:"/":"}
    PATH=${PATH/#"$_path:"/}
    PATH=${PATH/%":$_path"/}

    echo $PATH
}

function disableToolchain ()
{
    local path="$HOME/.toolchain_path"

    if [ -e "$path" ]
    then
        local TOOLCHAIN=$(< $path)
        if [[ "${PATH}" = *"${TOOLCHAIN}"* ]]
        then
            PATH=$(stripFromPath $TOOLCHAIN)
            echo "it has been removed"
        else
            echo "there is no spoon"
        fi
    else
        echo "You need to create a file at [$path] with only the path to the repo in it"
    fi
}

function with()
{
    local name="$1"

    if [[ "x$name" == "xhistory" ]]
    then
        set +o history
    else
        echo "Usage: with <history>"
    fi

}

function endwith()
{
    local name="$1"

    if [[ "x$name" == "xhistory" ]]
    then
        set -o history
    else
        echo "Usage: endwith <history>"
    fi
}

function dco()
{
    local path="$HOME/.dco_path"

    local index=${1:-0}
    local pathy=

    if [ -e "$path" ]
    then
        local ITER=0
        while IFS= read -r pathy
        do
            if [[ $ITER == $index ]]
            then
                break
            fi
            ITER=$(expr $ITER + 1)
        done < $path

        if [[ $ITER == $index ]]
        then
            if [ -d $pathy ]
            then
                cd $pathy
            else
                echo "[$pathy] is not a directory; bailing"
            fi
        else
            echo "you provided an index outside the range of possibilities"
        fi
    else
        echo " you need to create a file at [$path] with paths to repos in it"
        echo <<EOF
/path/to/user's/git/sensor
/path/to/user's/git/playgate
/path/to/user's/git/shits-n-giggles
EOF
    fi
}

function dotfiles()
{
    local path="$HOME/.dotfiles_path"

    if [ -e "$path" ]
    then
        cd $(< $path)
    else
        echo "You need to create a file at [$path] with only the path to the repo in it"
    fi
}

function bc2bc()
{
    local ibase=${1:- "A"}
    local obase=${2:- "A"}
    echo "ibase=${ibase};obase=${obase};$3" | bc
}

function __bc2bc_usage()
{
    local name=${FUNCNAME[1]}
    if [ "x$name" = "x" ]
    then
        echo "this is a private function and is not meant to be called directly"
        return
    fi
    echo "usage: $name <NUMBER>"
    echo "  NUMBER  the number to be converted, in $1"
}

function dec2hex()
{
    if [ "x$1" = "x" ]
    then
        __bc2bc_usage "decimal format (example: 8192)"
        return
    fi

    bc2bc "A" "16" "$1"
}

function hex2dec()
{
    if [ "x$1" = "x" ]
    then
        __bc2bc_usage "hexadecimal format, without '0x' (example: 2000)"
        return
    fi

    bc2bc "16" "A" "$1"
}

if [ -d "${HOME}/.bash_functions.d" ]
then
    for f in $(ls -1 ${HOME}/.bash_functions.d/*)
    do
        . $f
    done
fi

