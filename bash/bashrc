# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

function parse_git_branch {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo "(${txttea}"${ref#refs/heads/}"${txtrst})"
}

function _prompt_status {
    if [ -n "$prompt_status" ] ; then
      echo "${bldred}$prompt_status${txtrst}"
    fi
}


if [ "$color_prompt" = yes ]; then
    # setup colors
    # Text color variables
    txtred=$(tput setaf 1)          # red
    txtgrn=$(tput setaf 2)          # green
    txtyel=$(tput setaf 3)          # yellow
    txtblu=$(tput setaf 4)          # blue
    txtpur=$(tput setaf 5)          # purple
    txttea=$(tput setaf 6)          # teal
    txtwht=$(tput setaf 7)          # white
    txtund=$(tput sgr 0 1)          # Underline
    txtbld=$(tput bold)             # Bold
    bldred=${txtbld}${txtred}       #  red
    bldgrn=${txtbld}${txtgrn}       #  green
    bldyel=${txtbld}${txtyel}       #  yellow
    bldblu=${txtbld}${txtblu}       #  blue
    bldpur=${txtbld}${txtpur}       #  purple
    bldtea=${txtbld}${txttea}       #  teal
    bldwht=${txtbld}${txtwht}       #  white
    txtrst=$(tput sgr0)             # Reset
    gitdiff=${bldred}*${txtrst}
    gitadd=${bldtea}*${txtrst}
    info=${bldwht}*${txtrst}        # Feedback
    pass=${bldblu}*${txtrst}
    warn=${bldred}*${txtrst}
    ques=${bldblu}?${txtrst}

#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\012\$ '
    PS1='[\[\033[01;34m\] \w \[\033[00m\]] ${prompt_status}\012\[\e]0;\u@\h: \a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\$ '
    PS1='[\[\033[01;34m\] \w \[\033[00m\]] ${prompt_status}\012\[\e]0;\u at \h: \a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u at \h\[\033[00m\]\012\$ '
    PS1="\[${txtpur}\]\u\[${txtrst}\] at \[${txtyel}\]\h\[${txtrst}\] in \[${txtgrn}\]\w\[${txtrst}\] \$(parse_git_branch) \$(_prompt_status)\012\$ "
else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\012\$ '
    PS1='[ \w ] ${prompt_status}\012\u@\h: \a${debian_chroot:+($debian_chroot)}\u@\h:\$ '
fi
PS1="\[${txtpur}\]\u\[${txtrst}\] at \[${txtyel}\]\h\[${txtrst}\] in \[${txtgrn}\]\w\[${txtrst}\] \$(parse_git_branch) \$(_prompt_status)\012\$ "
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    #PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then

    # set solarized color scheme
    export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD

    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias cgrep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -trhalF'
alias l='ls -A'
alias c='clear'
alias s='less'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

if [ -f "$HOME/functions.sh" ] ; then
    . "$HOME/functions.sh"
fi

# add ~/bin to PATH, if it exists
if [ -d "$HOME/bin" ]; then
    export PATH="$PATH:$HOME/bin"
fi
export EDITOR=vim

BACKUPS=$HOME/.config/backups/files.db
function backup() {
    if [ "$#" -lt "1" ]
    then
        echo "need to provide a file to backup (abspath)"
        return 1
    fi

    local path=$(readlink -f $1)
    local owner=$(stat --format "%U:%G" $path)
    local mode=$(stat --format "%a" $path)
    local contents=$(cat $path | base64 -)
    sqlite3 $BACKUPS "insert into files (path,owner,mode,contents) values ('$path','$owner','$mode','$contents');"
}

function map {
    # if given a key and value, insert
    if [ "$#" -eq "2" ]
    then
        value=$(echo $2 | base64 -)
        sqlite3 -batch $BACKUPS <<EOF
insert into map (key,value) values ("$1", "$value");
EOF
        return $?
    elif [ "$#" -eq "1" ]
    then
        value=( $(sqlite3 -batch $BACKUPS <<EOF
.separator " "
SELECT value,id FROM map WHERE key="$1" ORDER BY id DESC LIMIT 1;
EOF
) )
        echo $(echo "${value[0]}" | base64 -d -)
    fi
}

if [ ! -e "$BACKUPS" ]
then
    mkdir -pv `dirname $BACKUPS`
    sqlite3 $BACKUPS "create table files (id INTEGER PRIMARY KEY, dt datetime default current_timestamp, path TEXT, owner TEXT, mode TEXT, contents BLOB);"
    sqlite3 $BACKUPS "create table map (id INTEGER PRIMARY KEY, dt datetime default current_timestamp, key TEXT, value TEXT);"
fi

export LOGFILE="$HOME/.configs/backups/logfile.db"
if [ ! -d `dirname $LOGFILE` ]
then
    mkdir -p `dirname $LOGFILE`
fi

if [ -d "/usr/lib/jvm/jdk1.7.0_51" ];
then
    export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_51
fi
if [ -d "/usr/lib/ant/apache-ant-1.9.3" ];
then
    export ANT_HOME=/usr/lib/ant/apache-ant-1.9.3
fi

#export PEPPER_FLASH_VERSION=$(grep '"version":' /opt/google/chrome*/PepperFlash/manifest.json| grep -Po '(?<=version": ")(?:\d|\.)*')
if [ -e "/usr/local/bin/virtualenvwrapper.sh" ]
then
    function enableVirtualenvWrapper() {
        source "/usr/local/bin/virtualenvwrapper.sh"
    }
fi

# set the GOPATH so things work
export GOPATH=$HOME/sandbox/go
export GOROOT=/usr/local/go
PATH="$PATH:$GOROOT/bin:$GOPATH/bin"

# prompt command testing
PROMPT_COMMAND='prompt_status=":: $? "; if [[ $prompt_status == ":: 0 " ]]; then prompt_status=; fi'
#PS1='[\[\033[01;34m\] \w \[\033[00m\]] ${prompt_status}\012\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\$ '

[[ -s "${HOME}/.bash_functions" ]] && source "${HOME}/.bash_functions"

if [ "$(uname)" = "Darwin" ]; then
    export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
fi

MANPATH=$MANPATH:$HOME/share/man
