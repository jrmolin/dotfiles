# $HOME/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# if in nix shell, don't load anything
#[[ -n $IN_NIX_SHELL ]] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

function parse_git_branch {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo "(${txttea}"${ref#refs/heads/}"${txtrst})"
}

# setup colors
# Text color variables
txtred=$(tput setaf 1)          # red
txtgrn=$(tput setaf 2)          # green
txtyel=$(tput setaf 3)          # yellow
txtblu=$(tput setaf 4)          # blue
txtpur=$(tput setaf 5)          # purple
txttea=$(tput setaf 6)          # teal
txtwht=$(tput setaf 7)          # white
txtund=$(tput sgr 0 1)          # Underline
txtbld=$(tput bold)             # Bold
bldred=${txtbld}${txtred}       #  red
bldgrn=${txtbld}${txtgrn}       #  green
bldyel=${txtbld}${txtyel}       #  yellow
bldblu=${txtbld}${txtblu}       #  blue
bldpur=${txtbld}${txtpur}       #  purple
bldtea=${txtbld}${txttea}       #  teal
bldwht=${txtbld}${txtwht}       #  white
txtrst=$(tput sgr0)             # Reset
gitdiff=${bldred}*${txtrst}
gitadd=${bldtea}*${txtrst}
info=${bldwht}*${txtrst}        # Feedback
pass=${bldblu}*${txtrst}
warn=${bldred}*${txtrst}
ques=${bldblu}?${txtrst}


export checkmark="${txtgrn}$(echo -e '\xE2\x9C\x94')${txtrst}"

function _prompt_status {
    if [ -n "$prompt_status" ] ; then
      echo "${bldred}$prompt_status${txtrst}"
    fi
}


if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\012\$ '
    PS1='[\[\033[01;34m\] \w \[\033[00m\]] ${prompt_status}\012\[\e]0;\u@\h: \a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\$ '
    PS1='[\[\033[01;34m\] \w \[\033[00m\]] ${prompt_status}\012\[\e]0;\u at \h: \a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u at \h\[\033[00m\]\012\$ '
    PS1="\[${txtpur}\]\u\[${txtrst}\] at \[${txtyel}\]\h\[${txtrst}\] in \[${txtgrn}\]\w\[${txtrst}\] \$(parse_git_branch) \$(_prompt_status)\012\$ "
else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\012\$ '
    PS1='[ \w ] ${prompt_status}\012\u@\h: \a${debian_chroot:+($debian_chroot)}\u@\h:\$ '
fi
PS1="\[${txtpur}\]\u\[${txtrst}\] at \[${txtyel}\]\h\[${txtrst}\] in \[${txtgrn}\]\w\[${txtrst}\] \$(parse_git_branch) \$(_prompt_status)\012\$ "
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    #PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then

    # set solarized color scheme
    export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD

    test -r $HOME/.dircolors && eval "$(dircolors -b $HOME/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias cgrep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -trhalF'
alias l='ls -A'
alias c='clear'
alias s='less'



# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

sourceIfExists()
{
    _PATH=$1

    if [ -f "$_PATH" ]
    then
        source "$_PATH"
    fi
}

addUnique()
{
    if [[ ":$PATH:" != *":$1:"* ]]
    then
        # only append if the directory exists
        if [ -d "$1" ]
        then
            PATH="$1:$PATH"
        fi
    fi
}

appendUnique()
{
    if [[ ":$PATH:" != *":$1:"* ]]
    then
        # only append if the directory exists
        if [ -d "$1" ]
        then
            PATH="$PATH:$1"
        fi
    fi
}

addUniqueToClasspath() {
    if [[ ":$CLASSPATH:" != *":$1:"* ]]
    then
        # only append if the directory exists
        CLASSPATH="$CLASSPATH:$1"
    fi
}

if [ -z "$CLASSPATH" ]
then
    CLASSPATH="."
fi

export CLASSPATH

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# add $HOME/bin to PATH, if it exists
addUnique "$HOME/bin"

# add antlr to the classpath
_ANTLR="$HOME/local-installations/antlr-4.7.1/antlr-4.7.1-complete.jar"
if [ -e $_ANTLR ]
then
    addUniqueToClasspath $_ANTLR
fi

export EDITOR=vim

#export PEPPER_FLASH_VERSION=$(grep '"version":' /opt/google/chrome*/PepperFlash/manifest.json| grep -Po '(?<=version": ")(?:\d|\.)*')

# prompt command testing
PROMPT_COMMAND='prompt_status=":: $? "; if [[ $prompt_status == ":: 0 " ]]; then prompt_status=; fi'
#PS1='[\[\033[01;34m\] \w \[\033[00m\]] ${prompt_status}\012\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\$ '

sourceIfExists $HOME/.bash_functions

if [ "x$(uname)" = "xDarwin" ]; then
    export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx

    if [ -f $(brew --prefix)/etc/bash_completion ];
    then
      . $(brew --prefix)/etc/bash_completion
    fi

    alias vi=nvim
    alias vim=nvim
fi

__nix_sh_file="/home/mo/.nix-profile/etc/profile.d/nix.sh"
[ -e "$__nix_sh_file" ] && . "$__nix_sh_file"

# add direnv support
if [ "xfile" = "x$(fnexists direnv)" ]
then
    eval "$(direnv hook bash)"
fi

if [ "x$LOCALE_ARCHIVE" = "x" ]
then
    if [ "xfile" = "x$(fnexists nix-env)" ]
    then
        export LOCALE_ARCHIVE=$(nix-env --installed --no-name --out-path --query glibc-locales)/lib/locale/locale-archive
    fi
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# $HOME/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
sourceIfExists $HOME/.bash_aliases

MANPATH=$MANPATH:$HOME/share/man


