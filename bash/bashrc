# $HOME/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
    xterm-256color) color_prompt=yes;;
esac

function fnexists()
{
    local result=$(LC_ALL=C type -t "$1")
    echo $result
}

function parse_git_branch {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo "(${txttea}"${ref#refs/heads/}"${txtrst})"
}

# setup colors
# from nord
#set $nord0   #2E3440
#set $nord1   #3B4252
#set $nord2   #434C5E
#set $nord3   #4C566A
#set $nord4   #D8DEE9
#set $nord5   #E5E9F0
#set $nord6   #ECEFF4
#set $nord7   #8FBCBB
#set $nord8   #88C0D0
#set $nord9   #81A1C1
#set $nord10  #5E81AC
#set $nord11  #BF616A
#set $nord12  #D08770
#set $nord13  #EBCB8B
#set $nord14  #A3BE8C
#set $nord15  #B48EAD
fromhex(){
    hex=${1#"#"}
    bytes=($(sed 's/\(..\)/\1 /g' <<< $hex))
    r=$((16#${bytes[0]}))
    g=$((16#${bytes[1]}))
    b=$((16#${bytes[2]}))

    printf "\e[0;38;2;%03d;%03d;%03dm" $r $g $b
}

export nord0=$(fromhex  "#2E3440")
export nord1=$(fromhex  "#3B4252")
export nord2=$(fromhex  "#434C5E")
export nord3=$(fromhex  "#4C566A")
export nord4=$(fromhex  "#D8DEE9")
export nord5=$(fromhex  "#E5E9F0")
export nord6=$(fromhex  "#ECEFF4")
export nord7=$(fromhex  "#8FBCBB")
export nord8=$(fromhex  "#88C0D0") # teal
export nord9=$(fromhex  "#81A1C1")
export nord10=$(fromhex "#5E81AC") # blue
export nord11=$(fromhex "#BF616A") # red
export nord12=$(fromhex "#D08770") # orange
export nord13=$(fromhex "#EBCB8B") # yellow
export nord14=$(fromhex "#A3BE8C") # green
export nord15=$(fromhex "#B48EAD") # purple


# Text color variables
txtred=$(tput setaf 1)          # red
txtgrn=$(tput setaf 2)          # green
txtyel=$(tput setaf 3)          # yellow
txtblu=$(tput setaf 4)          # blue
txtpur=$(tput setaf 5)          # purple
txttea=$(tput setaf 6)          # teal
txtwht=$(tput setaf 7)          # white
txtund=$(tput sgr 0 1)          # Underline
txtbld=$(tput bold)             # Bold
bldred=${txtbld}${txtred}       #  red
bldgrn=${txtbld}${txtgrn}       #  green
bldyel=${txtbld}${txtyel}       #  yellow
bldblu=${txtbld}${txtblu}       #  blue
bldpur=${txtbld}${txtpur}       #  purple
bldtea=${txtbld}${txttea}       #  teal
bldwht=${txtbld}${txtwht}       #  white
txtrst=$(tput sgr0)             # Reset
gitdiff=${bldred}*${txtrst}
gitadd=${bldtea}*${txtrst}
info=${bldwht}*${txtrst}        # Feedback
pass=${bldblu}*${txtrst}
warn=${bldred}*${txtrst}
ques=${bldblu}?${txtrst}

export whiteCheck="$(echo -e '\xe2\x9c\x85')"
export checkmark="${txtgrn}$(echo -e '\xE2\x9C\x94')${txtrst}"

function _prompt_status {
    if [ -n "$prompt_status" ] ; then
      echo "${bldred}$prompt_status${txtrst}"
    fi
}

export angry="$(echo -e '\xf0\x9f\x91\xbf\x0a')"
export upleft="$(echo -e '\xe2\x94\x8c')"
export longdash="$(echo -e '\xe2\x94\x80')"
export downleft="$(echo -e '\xe2\x94\x94')"
export downleft2="$(echo -e '\xd6\x82')"
u="$USER"
if [ $UID -eq 0 ]
then
    u="$angry"
fi
PS1='${upleft}${longdash}[\[${bldpur}\]$u\[${txtrst}\]] at [\[${bldyel}\]\h\[${txtrst}\]] in [\[${bldgrn}\]\w\[${txtrst}\]] $(parse_git_branch) $(_prompt_status)\012${downleft}${longdash}\$ '
PS2='${downleft}${longdash}> '
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    #PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then

    # set solarized color scheme
    #export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD

    test -r $HOME/.dircolors && eval "$(dircolors -b $HOME/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias cgrep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -trhalF'
alias l='ls -A'
alias c='clear'
alias s='less'



# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

sourceIfExists()
{
    _PATH=$1

    if [ -f "$_PATH" ]
    then
        source "$_PATH"
    fi
}

addUnique()
{
    if [[ ":$PATH:" != *":$1:"* ]]
    then
        # only append if the directory exists
        if [ -d "$1" ]
        then
            PATH="$1:$PATH"
        fi
    fi
}

appendUnique()
{
    if [[ ":$PATH:" != *":$1:"* ]]
    then
        # only append if the directory exists
        if [ -d "$1" ]
        then
            PATH="$PATH:$1"
        fi
    fi
}

addUniqueToClasspath() {
    if [[ ":$CLASSPATH:" != *":$1:"* ]]
    then
        # only append if the directory exists
        CLASSPATH="$CLASSPATH:$1"
    fi
}

if [ -z "$CLASSPATH" ]
then
    CLASSPATH="."
fi

export CLASSPATH

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
elif [ -f /etc/profile.d/bash_completion.sh ]; then
    . /etc/profile.d/bash_completion.sh
fi

# add /opt/bin to PATH, if it exists
addUnique "/opt/bin"

# add $HOME/local/bin to PATH, if it exists
addUnique "$HOME/local/bin"

# add $HOME/bin to PATH, if it exists
addUnique "$HOME/bin"

# add antlr to the classpath
_ANTLR="$HOME/local-installations/antlr-4.7.1/antlr-4.7.1-complete.jar"
if [ -e $_ANTLR ]
then
    addUniqueToClasspath $_ANTLR
fi

_JAVAFBP="$HOME/local/fbp/javafbp-4.1.11.jar"
if [ -e $_JAVAFBP ]
then
    addUniqueToClasspath $_JAVAFBP
fi

export EDITOR=vim

# prompt command testing
PROMPT_COMMAND='prompt_status=":: $? "; if [[ $prompt_status == ":: 0 " ]]; then prompt_status=; fi'
#PS1='[\[\033[01;34m\] \w \[\033[00m\]] ${prompt_status}\012\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\$ '

sourceIfExists $HOME/.bash_functions

if [ "x$(uname)" = "xDarwin" ]; then
    export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx

    if [ -f $(brew --prefix)/etc/bash_completion ];
    then
      . $(brew --prefix)/etc/bash_completion
    fi

    export GOPATH="$HOME/go"
    export GOBIN="$GOPATH/bin"
    PATH="$GOPATH/bin:$PATH"
fi

__nix_sh_file="$HOME/.nix-profile/etc/profile.d/nix.sh"

# add direnv support
if [ "xfile" = "x$(fnexists direnv)" ]
then
    eval "$(direnv hook bash)"
fi

# only source the nix file if we haven't already done that
if [ "x" = "x$(fnexists nix-env)" ]
then
    [ -f "$__nix_sh_file" ] && . "$__nix_sh_file"
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# $HOME/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
sourceIfExists $HOME/.bash_aliases
sourceIfExists $HOME/.bash_completion

MANPATH=$MANPATH:$HOME/share/man

appendUnique /opt/st/stm32cubeide_1.9.0/

export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc
PATH=$(printf "%s" "$PATH" | awk -v RS=':' '!a[$1]++ { if (NR > 1) printf RS; printf $1 }')
export JEKYLL_VERSION=4.3

sourceIfExists $HOME/.cargo/env
appendUnique /opt/blender
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc
PATH=$(printf "%s" "$PATH" | awk -v RS=':' '!a[$1]++ { if (NR > 1) printf RS; printf $1 }')

sourceIfExists "$HOME/.cargo/env"

# add cmake to the path
appendUnique /opt/cmake/bin

# add go to the path
appendUnique /opt/nvim/bin
appendUnique /opt/zig

# add local binaries installed
appendUnique $HOME/.local/bin

# need a function to go to the root of a git project
function root()
{
  local git_root=$(git -C . rev-parse --show-toplevel 2> /dev/null)
  if [ "x${git_root}" = "x" ]
  then
      echo "no git root found"
  else
      if [ "$(pwd)" = "$git_root" ]
      then
	  # do nothing
	  echo "already at root [$git_root]"
      else
	  cd "$git_root"
      fi
  fi
}
export EDITOR=nvim
alias vim=nvim
alias vi=nvim
sourceIfExists $HOME/.env

if [ "xfile" = "x$(fnexists starship)" ]
then
    eval "$(starship init bash)"
fi

# The next line updates PATH for the Google Cloud SDK.
sourceIfExists "$HOME/.local/google-cloud-sdk/path.bash.inc"
# The next line enables shell command completion for gcloud.
sourceIfExists "$HOME/.local/google-cloud-sdk/completion.bash.inc"

function find-orig-files-and-eradicate-them() {
    local count=$(find . -type f -name "*.orig" | wc -l)
    if [[ $count > 0 ]] ; then
        echo "Found ${count} file(s) to eradicate"
        $(find . -type f -name "*.orig" -exec rm {} \;)
        echo "Looking again ..."
        count=$(find . -type f -name "*.orig" | wc -l)
        echo "And now found ${count} file(s) to eradicate"
    else
        echo "No files found"
    fi
}

function list-all-files-ignored-by-git-in-this-repo() {
    local res=$(git ls-files --others --ignored --exclude-standard | bat)
    echo "done ${res}"
}

if [ -f $HOME/.dco_path ]
then
    export EAF_CONFIG_FILEPATH=$(head -1 $HOME/.dco_path)/eaf_config-dev.yaml
fi
