-*- mode: org; fill-column: 80; -*-
#+title: Emacs From Scratch Configuration
#+date: <2021-12-09 Thu 15:08>

* Welcome!

The following variables are used to tweak some of the configuration pieces for use in the live streams so you might need to adjust them for your local machine if you try to use this configuration directly.

#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  ;; You will most likely need to adjust this font size for your system!
  (defvar efs/default-font-size 20)
  (defvar efs/default-variable-font-size 20)

  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(90 . 90))

  (set-frame-font "FiraCode Nerd Font Mono 12" nil t)
#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)


  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package magit)
  (use-package evil)
  (use-package counsel)

  (ivy-mode 1)

#+end_src


* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  (setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

(defvar --backup-directory (concat user-emacs-directory "backups"))
(if (not (file-exists-p --backup-directory))
        (make-directory --backup-directory t))
(setq backup-directory-alist `(("." . ,--backup-directory)))
(setq make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t               ; auto-save every buffer that visits a file
      auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
      )

#+end_src


* Auto-tangling code
#+BEGIN_SRC emacs-lisp
 ;; auto-tangle this file
  (defvar user/init-org-file (concat user-emacs-directory "Emacs.org"))
  (defvar user/init-el-file  (concat user-emacs-directory "init.el"))

  (defun tangle-init ()
   "If the current buffer is 'Emacs.org', the code blocks are tangled, and the tangled file is compiled"
    (when (equal (buffer-file-name)
                 (file-truename user/init-org-file))
      ;; avoid running hooks when tangling
      (let ((prog-mode-hook nil))
        (org-babel-tangle user/init-el-file)
        (byte-compile-file user/init-el-file))))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC


* Syntax modes

#+BEGIN_SRC emacs-lisp
  (defun user/last-compilation-buffer ()
    "Display last compilation buffer"
    (interactive)
    (if (buffer-live-p compilation-last-buffer)
        (set-window-buffer (get-buffer-window) compilation-last-buffer)
      (message "Last compilation buffer is killed.")))

  (global-set-key (kbd "C-c c") #'user/last-compilation-buffer)

  (setq compilation-scroll-output 'first-error)

  (when (version<= "26.0.50" emacs-version)
    (global-display-line-numbers-mode))

  (setq-default indent-tabs-mode nil)
  (setq tab-stop-list (number-sequence 4 120 4))
  (setq tab-width 4)
  (define-key text-mode-map (kbd "<tab>") 'tab-to-tab-stop)

  (setq c-default-style '((java-mode . "java")
                        (awk-mode . "awk")
                        (other . "linux"))
      c-basic-offset 4)


    (defun my-indent-setup ()
      (c-set-offset 'arglist-intro '+))
    (add-hook 'java-mode-hook 'my-indent-setup)
    (add-hook 'c++-mode-hook 'my-indent-setup)
    (add-hook 'c-mode-hook 'my-indent-setup)
#+END_SRC

* Functions
 
#+BEGIN_SRC emacs-lisp
(defun user/find-in-ancestry (args)
  "find a parent directory that has 'args' as its child"
  (locate-dominating-file
    (expand-file-name ".")
    args))

(defun gitmeyo ()
  "find .git from here"
  (locate-dominating-file
    (expand-file-name ".")
    ".git"))

(defun gitrelative (arg)
  "get path relative from .git parent"
  (let ((default-directory (or (gitmeyo) default-directory)))
    (expand-file-name arg)))

(defun cformat ()
  "run the clang format"
  (interactive)
  (let ((script (gitrelative "Tools/CodeScanners/clang_format.py")))
    (shell-command (concat "python " script " --replace-file"))))
(global-set-key (kbd "<f7>") 'cformat)


(defun runbuild ()
  "run the build script"
  (interactive)
  (let ((script (gitrelative "Tools/BuildScripts/Rebuild.py")))
    (concat "python " script " --arch x64 --build debug")))
(setq compile-command (runbuild))
(global-set-key (kbd "<f5>") 'compile)

;; get the tests executable name
;; get the test name
;; get the repo directory
;; build a string representing the executable command
;; run the command
;; switch to the shell command output buffer

(defun run-buffer ()
  (interactive)
  (shell-command (concat "python " buffer-file-name)))

(defun user/open-file (args)
  (let ((default-directory (or (user/find-in-ancestry args) default-directory)))
  (switch-to-buffer (find-file-noselect (read-file-name "find file: ")))))

(defun repo-open-file ()
  (interactive)
  (user/open-file ".git"))
(global-set-key (kbd "C-x e") 'repo-open-file)

(global-set-key (kbd "C-x r") (lambda ()
                      (interactive)
                      (user/open-file "Lib")))

(global-set-key (kbd "<f4>") (lambda ()
                     (interactive)
                     (load-file user/init-el-file)))

;; Insert new line below current line
;; and move cursor to new line
;; it will also indent newline
(global-set-key (kbd "<C-return>") (lambda ()
                   (interactive)
                   (end-of-line)
                   (newline-and-indent)))

;; Insert new line above current line
;; and move cursor to previous line (newly inserted line)
;; it will also indent newline
;; TODO: right now I am unable to goto previous line, FIXIT
(global-set-key (kbd "<C-S-return>") (lambda ()
                       (interactive)
                       (beginning-of-line)
                       (newline-and-indent)
                       (previous-line)))

#+END_SRC

