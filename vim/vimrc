" vim: foldmethod=syntax
" System-wide VIM resource file
"
" Recommended Plugins:
" - Solarized (color)
" - Vundle (plugin manager)
"

" Environment {{{
        " Basics {{{
            " Disable 'vi' compatibility; this affects other settings, so it must
            " be the first line
            set nocompatible
        " }}}

        " CPP macro shifting {
          " disable vim's annoying habit of not letting macros go anywhere
          let sk = substitute(&cinkeys, ',0#', "", "g")
          let &cinkeys = sk
" }}}

" Vundle and its packages {{{
        " CPP macro shifting {
           " disable vim's annoying habit of not letting you put macros at any level
           let sk = substitute(&cinkeys, ',0#', "", "g")
           let &cinkeys = sk
        " }

        " VIMRC Functions
        " {rtp}/autoload/has.vim
        function! s:has_colorscheme(name)
            let pat = 'colors/'.a:name.'.vim'
            return !empty(globpath(&rtp, pat))
        endfunction

    if has('unix')
        let g:dir_sep = '/'
        let g:top_dir = g:dir_sep
    else
        let g:dir_sep = '\\'
        let g:top_dir = 'c:\\'
    endif

    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    Plugin 'VundleVim/Vundle.vim'

    " Sensible defaults
    Plugin 'tpope/vim-sensible'

    Plugin 'bkad/CamelCaseMotion'

    " git
    Plugin 'tpope/vim-fugitive'

    " Better status line
    "Plugin 'vim-airline/vim-airline'

    Plugin 'altercation/vim-colors-solarized'

    " use nord instead of solarized
    Plugin 'arcticicestudio/nord-vim'

    call vundle#end()
" }}}

" System {
        silent !mkdir ~/.vimlocal > /dev/null 2>&1
        silent !mkdir ~/.vimlocal/undodir > /dev/null 2>&1
        silent !mkdir ~/.vimlocal/swapdir > /dev/null 2>&1
" }

" General {{{
"       set tags=./tags;                        " recursively search for a
                                                " tags file
        set background=dark                     " Assume a dark background

        if has('unix') && !has('gui') && !has('nvim')
            set term=$TERM                      " Make arrow and other keys work
        endif


        filetype on                             " Enable filetype
        filetype plugin on                      " Enable filetype plugins
        filetype indent on                      " Enable filetype indentations
        syntax on                               " Syntax highlighting
        set mouse=a                             " Automatically enable mouse usage
        set mousehide                           " Hide the mouse cursor while typing
        scriptencoding utf-8
        set encoding=utf-8
        set fileencoding=utf-8

        if has('x') && has('gui')               " On Linux use '+' register copy/paste
            set clipboard=unnamedplus
        elseif has('gui')                       " On Max/Windows, use '*'
            set clipboard=unnamed
        endif

        " Automatically 'chdir' to current file's directory
        set autochdir

        au BufRead,BufNewFile SConstruct,SConscript    setlocal filetype=python

        set lazyredraw                          " Don't redraw when executing macros
        set autowrite                           " Automatically write a file when
                                                " leaving a modified buffer

        " folding
        set foldcolumn=3

        " Better UNIX/Windows compatibility
        set viewoptions=folds,options,cursor,unix,slash
        set virtualedit=onemore                 " Allow cursor beyond last character
        set history=1000                        " Store a ton of history
        "set spell                               " Spell checking on
        set hidden                              " Allow buffer switching without saving


        " Setting up the directories
        "set backup                              " Backups are nice
        set undolevels=1000                     " Maximum number of changes
        if has('persistent_undo')
            set undodir=~/.vimlocal/undodir/        " Set 'undofile' directory
            set undofile                        " Setup persistent 'undo' files
            set undoreload=10000                " Maximum lines to save for reload
        endif

        set dir=~/.vimlocal/swapdir/
" }
" }}}

" Reformat the current paragraph
    nnoremap Q gq
    vnoremap Q gq

" Plugin setup

" javascript stuff {{{

    " Expand tabs for javascript files
    au FileType javascript setlocal expandtab

" }}}

" Vim UI {
        " VIMRC Functions {{{
        " {rtp}/autoload/has.vim
        function! s:has_colorscheme(name)
            let pat = 'colors/'.a:name.'.vim'
            return !empty(globpath(&rtp, pat))
        endfunction
        " }}}

        " Color Scheme {
            if s:has_colorscheme('nord')
                colorscheme nord
            elseif s:has_colorscheme('solarized')
                let g:solarized_termcolors=256
                let g:solarized_termtrans=1
                let g:solarized_contrast="high"
                let g:solarized_visibility="high"
                color solarized
            elseif s:has_colorscheme('torte')
                color torte
            else
                color default
            endif
        " }

        " Highlight characters that go over the 100-column limit
        ":highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white
        ":match OverLength '\%101v.*'
        "
        if exists('+colorcolumn')
            set colorcolumn=100
        else
            au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>100v.\+', -1)
        endif

        if (has("termguicolors"))
          set termguicolors
        endif

        set tabpagemax=15                       " Only show 15 tabs
        set showmode                            " Display the current mode
        set hidden

        set cursorline                          " Highlight the current line

        if has('cmdline_info')
            set ruler                           " Show the ruler
            set rulerformat=%30(%=\:%n%y%m%r%w\ %l,%c%V\ %P%)

            set showcmd                         " Show partial commands on status line
                                                " and Selected characters/lines in
                                                " visual mode
        endif

        if has('statusline')
            set laststatus=2

            " Broken down into easily includeable segments
            set statusline=%<%f\ [%n]                    " Filename/buffer
            set statusline+=\ %w%h%m%r                     " Options
            set statusline+=%{fugitive#statusline()} " Git Hotness
            set statusline+=\ [%{&ff}/%Y]                " Filetype
            set statusline+=\ [%{getcwd()}]              " Current dir
            set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
        endif

        set backspace=indent,eol,start  " Backspace for dummies
        set linespace=0                     " No extra spaces between rows
        set number                          " Line numbers on
        " set relativenumber                  " Line numbers on (reverse)
        set showmatch                       " Show matching brackets/parentheses
        set incsearch                       " Find as you type
        set hlsearch                        " Highlight search terms
        set winminheight=0                  " Windows can be 0 line height
        set ignorecase                      " Case insentitive search
        set smartcase                       " Case sensitive when uc present
        set wildmenu                        " Show list instead of just completing
        set wildmode=list:longest,full  " Command <Tab> completion, list
                                        " matches, then longest part, then all
        set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
        set scrolljump=5                    " Lines to scroll when cursor leaves screen
        set scrolloff=3                     " Minimum lines to keep above/below cursor
        set list
        set vb                              " Use visual bells

        " Highlight problematic whitespace
        set listchars=tab:ยป\ ,trail:รท,extends:รท,nbsp:รท
        " turn off swapping foreground and background on special keys
        highlight SpecialKey cterm=none gui=none
" }

" }}}


" Formatting {{{
        "set nowrap                          " Wrap long lines
        set autoindent                      " Indent at the same level of previous line
        set shiftwidth=4                    " Use indents of 4 spaces
        set expandtab                       " Tabs are spaces, not tabs
        set tabstop=4                       " An indentation every four columns
        set softtabstop=4                   " Let backspace delete indent
        "set matchpairs+=<:>                 " Match, to be used with '%'
        set pastetoggle=<F12>               " pastetoggle (sane indentation on paste)
        "set comments=sL:/*,mb:*,elx:*/ " Auto format comment blocks


        set ff=unix                         " Set the default file format to UNIX
" }}}

" silly functions {
function! SpaceOutSelection()
    let l:lnum1 = getpos("'<")[1]
    let l:lnum2 = getpos("'>")[1]
    echom l:lnum1 . "::" . l:lnum2
    echom "normal! :" . l:lnum2 . "<CR>"
    echom "normal! joD"
    echom "normal! :" . l:lnum1 . "<CR>"
    echom "normal! OD"
    echom l:lnum2
endfunction

function! FindDirInAncestry(...)
    let l:dirname = a:0 ? a:1 : '.git'

    " store off our current directory
    let l:cur = expand('%:p')
    let l:prev = l:cur

    while 1
        let l:prev = l:cur
        let l:cur = fnamemodify(l:cur, ':h')
        if l:cur == g:top_dir
            let l:fn = l:cur.''.l:dirname
        else
            let l:fn = l:cur.g:dir_sep.l:dirname
        endif

        if filereadable(l:fn) || isdirectory(l:fn)
            return ':e ' . l:cur . g:dir_sep
        endif

        if l:cur == l:prev
            break
        endif
    endwhile

    return ':e ' . expand('%:p:h')
endfunction

function! SpaceItOut()
    let cnum = virtcol('.')
    let lnum = line('.')
    let cend = 100
    let numSpaces = cend - cnum - 1
    execute ':normal! ' . numSpaces . 'a '
    echom "need to add " . numSpaces . " spaces"
endfunction

function! StripTrailingWhitespace()
    " remember where we were
    let l:save = winsaveview()

    %s/\s\+$//e
    call winrestview(l:save)
    echo "stripped trailing whitespace"
endfunction


" Key (re)Mappings {{{
        " The default leader is '\', but many people prefer ',' as it's in a
        " standard location.
        let mapleader = ','


        " Easier moving in tabs and windows
        "map <C-J> <C-W>j<C-W>
        "map <C-K> <C-W>k<C-W>
        "map <C-L> <C-W>l<C-W>
        "map <C-H> <C-W>h<C-W>

        " Map Command+T to autocomplete
        imap <C-Space> <C-x><C-o>
        imap <C-@> <C-Space>
        " inoremap <expr> <C-K> ShowDigraphs()

        " function! ShowDigraphs()
            " digraphs
            " call getchar()
            " return "\<C-K>"
        " endfunction

        " Map <leader>+s to save
        nnoremap <Leader>w :w<CR>

        " echo the file name of the editing file
        nnoremap <Leader>f :echom @%<CR>

        " echo the current pwd
        nnoremap <Leader>p :pwd<CR>

        " list the buffers
        nnoremap <Leader>l :ls<CR>

        " echo the full path to the file being viewed/edited
        nnoremap <Leader>; :echo expand('%:p')<CR>

        " delete all ending spaces on each line
        nnoremap <Leader>s :call StripTrailingWhitespace()<CR>

        " swap two words
        nnoremap <Leader>x hdeep

        " put the current path into the buffer
        nnoremap <Leader>. :put =expand('%:p')<CR>

        " Wrapped lines goes down/up to next row, rather than next line in file
        nnoremap j gj
        nnoremap k gk

        nnoremap <leader>t :set expandtab<CR>:retab<CR>

        " Toggle search highlighting
        nmap <silent> <leader>/ :set invhlsearch<CR>

        " replace highlighted search
        nmap <expr>  M  ':%s/' . @/ . '//g<LEFT><LEFT>'

        " start editing from this project's root directory
        "nmap <expr> <Leader>e  FindDirInAncestry('.git')
        nmap <expr> <C-e>  FindDirInAncestry('.git')

        " list the buffers
        nnoremap <Leader>l :ls<CR>

        " list the registers
        nnoremap <Leader>r :reg<CR>

        " space it out
        nmap <silent> ;s :call SpaceItOut()<CR>

        " macro-it-out
        nmap <silent> ;m ;sa\<ESC>

        " search for what is highlighted
        vmap <silent> // y/<C-R>"<CR>

        " clear out the highlighted thing
        nmap <silent> ;/ :let @/ = ""<CR>

        " Visual shifting (does not exit Visual mode)
        vnoremap < <gv
        vnoremap > >gv
        vnoremap <S-Tab> <gv
        vnoremap <Tab> >gv

        " Fix home and end keybindings for screen, particularly on mac
        " - for some reason, this fixes the arrow keys too.
        map [F $
        imap [F $
        map [H g0
        imap [H g0

        " Add โvimโ bindings to make โvimrcโ easier to edit
        "
        " ,v brings up ".vimrc"
        " ,V reloads it -- making all changes active (have to save first)
        map <silent> <leader>v :split $HOME/.vimrc<CR><C-W>_
        map <silent> <leader>V :source $HOME/.vimrc<CR>:filetype detect<CR>:exe ":echo \"vimrc reloaded\""<CR>
" }}}


" Plugins {
        " Makefile {
            autocmd FileType make setlocal noexpandtab tabstop=8 shiftwidth=8 softtabstop=0
            augroup filetype
                au! BufRead,BufNewFile *Makefile* setlocal filetype=make
            augroup END
        " }}}
        "
        augroup Clips
            au! BufRead,BufNewFile *.clp setlocal filetype=clips
        augroup END

        " llvm {

        " Enable syntax highlighting for LLVM files. To use, copy
        " utils/vim/llvm.vim to ~/.vim/syntax .
            augroup filetype
                au! BufRead,BufNewFile *.ll     setlocal filetype=llvm
            augroup END

        " Enable syntax highlighting for tablegen files. To use, copy
        " utils/vim/tablegen.vim to ~/.vim/syntax .
            augroup filetype
                au! BufRead,BufNewFile *.td     setlocal filetype=tablegen
            augroup END
        " }

        " Enable syntax highlighting for scons files.
            augroup filetype
                au! BufRead,BufNewFile SCons*   setlocal filetype=python
            augroup END
        " }

        " Enable syntax highlighting for fasmg files. To use, copy
        " utils/vim/tablegen.vim to ~/.vim/syntax .
            augroup filetype
                au! BufRead,BufNewFile *.inc,*.fasm setlocal filetype=fasm
            augroup END
        " }

        " Fix tab/space for go files
        " utils/vim/tablegen.vim to ~/.vim/syntax .
            augroup filetype
                au! BufRead,BufNewFile *.go setlocal filetype=go list!  noexpandtab tabstop=4 shiftwidth=4 softtabstop=4
                au! BufRead,BufNewFile *.go setlocal filetype=go noexpandtab tabstop=4 shiftwidth=4 softtabstop=4 list!
            augroup END
        " }

" }}}


" GUI Settings {{{

        " indent {
            filetype plugin indent on
        " }
" }


        " GVIM- (here instead of .gvimrc)
        if has('gui_running')
            " Graceful font degradation
            if has('gui_macvim')
                silent! set guifont=Monaco:h12
                set transparency=5              " Make the window slightly transparent
            else
                set guifont=DejaVu\ Sans:h9
            endif


            set guioptions-=T                   " Remove the toolbar
            "set lines=40                        " 40 lines of text instead of 24,
        else
            if &term == 'xterm' || &term == 'screen'
                set t_Co=256                    " Enable 256 colors to stop the
                                            " CSApprox warning and make xterm vim
                                            " shine
            endif
            "set term=builtin_ansi               " Make arrow and other keys work
        endif
" }}}
"
" airline {{{
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_tabs = 1
" }}}

" camelcasemotion {{{
    call camelcasemotion#CreateMotionMappings('<leader>')
    map ;w <Plug>CamelCaseMotion_w
    map ;b <Plug>CamelCaseMotion_b
    map ;e <Plug>CamelCaseMotion_e
" }}}

" }

" }
